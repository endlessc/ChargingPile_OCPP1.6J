{"name": "test_Recurrent_cpVoltN", "status": "failed", "statusDetails": {"message": "AssertionError: assert False is True", "trace": "event_loop = <_WindowsSelectorEventLoop running=False closed=False debug=False>\n\n    @allure.feature(\"test_Recurrent_cpVoltN\")\n    @pytest.mark.asyncio\n    async def test_Recurrent_cpVoltN(event_loop):\n        # 插枪\n        Connector.slot()\n    \n        # 获取交流家桩的枪启动充电之前的状态\n        status = await waitConnectorStatus(1, \"Preparing\")\n        assert status == \"Preparing\"\n    \n        for i in range(500):\n            logging.info(\"========这是第%s次开始执行========\" % str(i+1))\n            # 远程启动充电\n            clearTriggerMessage()\n            with open(\"schema/RemoteStartTransaction.json\", 'r') as f:\n                data = json.load(f)\n            response = await service.remoteStartTransaction(event_loop, id_tag=data.get('idTag'),\n                                                            connector_id=data.get('connectorId'),\n                                                            charging_profile=data.get('chargingProfile'))\n            assert response[0].status == RegistrationStatus.accepted\n    \n            # 等待鉴权通过\n            flag, _ = await waitRequest(\"authorize\", 30)\n            assert flag is True\n    \n            # 等待桩返回开始订单的信息\n            flag, _ = await waitRequest(\"start_transaction\")\n            assert flag is True\n    \n            # 获取桩充电之后的状态\n            status = await waitConnectorStatus(1, \"Charging\", 30)\n            assert status == \"Charging\"\n            logging.info(\"********正在充电********稍等约1分钟********\")\n            # sleep(50)\n    \n            # 结束远程充电\n            response = await service.remoteStopTransaction(event_loop, data['chargingProfile']['transactionId'])\n            assert response[0].status == RegistrationStatus.accepted\n            status = await waitConnectorStatus(1, \"Preparing\", 30)\n            assert status == \"Preparing\"\n    \n            # 重启充电桩\n            clearTriggerMessage()\n            response = await service.reset(event_loop, \"Soft\")\n            assert response[0].status == RegistrationStatus.accepted\n            logging.info(\"稍等，桩正在重启\")\n            # sleep(20)\n    \n            # 等待充电桩重启\n            flag, _ = await waitRequest(\"boot_notification\")\n>           assert flag is True\nE           assert False is True\n\ntest_1.py:70: AssertionError"}, "attachments": [{"name": "log", "source": "9d5d0ae8-c263-40d9-9892-58173bf1db09-attachment.txt", "type": "text/plain"}], "start": 1642915378294, "stop": 1642916438395, "uuid": "077884f1-1d55-4893-8844-cfeff0dc78aa", "historyId": "b91696d621ce5b922750313edcf10ef8", "testCaseId": "b6d6f64fcd0b4c4525afc5afead54c2c", "fullName": "testcase.test_my_API.test_1#test_Recurrent_cpVoltN", "labels": [{"name": "feature", "value": "test_Recurrent_cpVoltN"}, {"name": "tag", "value": "asyncio"}, {"name": "parentSuite", "value": "testcase.test_my_API"}, {"name": "suite", "value": "test_1"}, {"name": "host", "value": "DESKTOP-2E61UQ1"}, {"name": "thread", "value": "12396-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_my_API.test_1"}]}